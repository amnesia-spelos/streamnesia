@model IndexViewModel

<div class="container">
    <main role="main" class="pb-3">
        <div class="text-center">
            <img src="~/img/tada-spelos.webp" width="350" height="350" />
            <h1 class="display-4">Welcome to Streamnesia 3.0</h1>
            <p>The next generation of the crazy chaos mod you know and love!</p>
        </div>
        <div class="container py-4">
            <div class="row g-2">
                <div class="col-md-6">
                    <div class="card border">
                        <div id="AmnesiaTile" class="card-body d-flex align-items-center gap-3">
                            <div id="AmnesiaTileCircle" class="rounded-circle bg-secondary" style="width: 40px; height: 40px;"></div>
                            <div class="flex-grow-1">
                                <h6 class="mb-1">Amnesia Game Client</h6>
                                <small id="AmnesiaTileDesc" class="text-muted"></small>
                            </div>
                            <div id="AmnesiaTileActionsDiv">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card border">
                        <div class="card-body d-flex align-items-center gap-3">
                            <div class="rounded-circle bg-secondary" style="width: 40px; height: 40px;"></div>
                            <div class="flex-grow-1">
                                <h6 class="mb-1">Twitch Bot</h6>
                                <small class="text-muted">Not running</small>
                            </div>
                            <button class="btn btn-outline-dark btn-sm">Start</button>
                        </div>
                    </div>
                </div>

                <button onclick="loadPayloadsTest()" class="btn btn-outline-primary btn-sm">📦 Load Payloads</button>
                <button onclick="startTwitchBot()" class="btn btn-outline-secondary btn-sm">🤖 Start Twitch bot</button>
                <button onclick="runCmdQueueTest()" class="btn btn-outline-secondary btn-sm">▶️ Run Command Queue Test</button>
                <button onclick="startTwitchPoll()" class="btn btn-outline-danger btn-lg">💀💀💀💀 START TWITCH POLL CHAOS 💀💀💀💀</button>
                <br />
                <br />
                <button onclick="startChaosTest()" class="btn btn-outline-danger btn-lg">💀 START LOCAL CHAOS</button>
            </div>
        </div>
    </main>
</div>

@section Scripts
{
    <script>
        const CircleStyleDefault = "rounded-circle bg-secondary";
        const CircleStyleBlue = "rounded-circle bg-primary";
        const CircleStyleGreen = "rounded-circle bg-success";
        const CircleStyleRed = "rounded-circle bg-danger";

        const amnesiaTile = document.getElementById('AmnesiaTile');
        const amnesiaTileCircle = document.getElementById('AmnesiaTileCircle');
        const amnesiaTileDesc = document.getElementById('AmnesiaTileDesc');
        const amnesiaTileActionsDiv = document.getElementById('AmnesiaTileActionsDiv');

        function onAmnesiaConnectPressed(event) {
            amnesiaStartButton.disabled = true;
            startClient();
            event.preventDefault();
        }

        function onAmnesiaDisconnectPressed(event) {
            amnesiaStopButton.disabled = true;
            stopClient();
            event.preventDefault();
        }

        function runCmdQueueTest() {
            connection.invoke("RunCommandQueueTest").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function loadPayloadsTest() {
            connection.invoke("LoadPayloadsTest").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function startChaosTest() {
            connection.invoke("StartLocalChaos").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function startTwitchPoll() {
            connection.invoke("StartTwitchPollChaos").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function startTwitchBot() {
            connection.invoke("StartTwitchBot").catch(function (err) {
                return console.error(err.toString());
            });
        }

        const amnesiaStartButton = document.createElement('button');
        amnesiaStartButton.classList.add('btn', 'btn-outline-success', 'btn-sm', 'd-block');
        amnesiaStartButton.innerText = 'Connect';
        amnesiaStartButton.addEventListener('click', onAmnesiaConnectPressed);

        const amnesiaStopButton = document.createElement('button');
        amnesiaStopButton.classList.add('btn', 'btn-outline-danger', 'btn-sm', 'd-block');
        amnesiaStopButton.innerText = 'Disconnect';
        amnesiaStopButton.addEventListener('click', onAmnesiaDisconnectPressed);

        const amnesiaWarningText = document.createElement('small');
        amnesiaWarningText.classList.add('text-warning');

        const amnesiaErrorText = document.createElement('small');
        amnesiaErrorText.classList.add('text-danger');

        const connection = new signalR.HubConnectionBuilder().withUrl("/statushub").build();
        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        setAmnesiaTileState("@Model.CurrentAmnesiaClientState", "");

        // TODO: Block until SignalR connects

        connection.on("AmnesiaClientStateChanged", setAmnesiaTileState);

        function startClient() {
            connection.invoke("StartAmnesiaClient").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function stopClient() {
            connection.invoke("StopAmnesiaClient").catch(function (err) {
                return console.error(err.toString());
            });
        }

        function setAmnesiaTileState(state, message) {
            console.log("Amnesia client state: ", state);

            if (state === 'Disconnected') {
                amnesiaTileCircle.className = CircleStyleDefault;
                amnesiaTileDesc.innerText = 'Not running';
                amnesiaStartButton.disabled = false;
                amnesiaWarningText.innerText = 'Open Amnesia.exe before pressing Start';
                amnesiaTileActionsDiv.replaceChildren(amnesiaWarningText, amnesiaStartButton);
            }
            else if (state === 'Connecting') {
                amnesiaTileCircle.className = CircleStyleBlue;
                amnesiaTileDesc.innerText = 'Connecting...';
                amnesiaWarningText.innerText = 'Ensure the game is running and in focus';
                amnesiaTileActionsDiv.replaceChildren(amnesiaWarningText);
            }
            else if (state === 'Connected') {
                amnesiaTileCircle.className = CircleStyleGreen;
                amnesiaTileDesc.innerText = 'Connected';

                amnesiaStopButton.disabled = false;
                amnesiaTileActionsDiv.replaceChildren(amnesiaStopButton);
            }
            else if (state === 'Failed') {
                amnesiaTileCircle.className = CircleStyleRed;
                amnesiaTileDesc.innerText = 'ERROR';
                amnesiaErrorText.innerText = message;
                amnesiaStartButton.disabled = false;
                amnesiaStartButton.innerText = "Retry";
                amnesiaTileActionsDiv.replaceChildren(amnesiaErrorText, amnesiaStartButton);
            }
        }
    </script>
}
