@{
    ViewData["HideHeader"] = true;
}

﻿<style>
     body {
         background-color: rgba(0, 0, 0, 0);
     }

     .option {
         background-color: rgba(255, 255, 255, 0.9);
         width: 400px;
         float: left;
         padding: 20px;
         margin: 10px;
         box-shadow: 0px 2px 4px 3px rgba(0, 0, 0, 0.2);
     }

         .option > h1 {
             font-size: 20px;
             text-align: center;
         }

     .votes {
         text-align: center;
         font-weight: bold;
         float: right;
     }

     .cmd {
         text-align: center;
         color: rgb(0, 0, 0);
     }

     .code-pop {
         font-size: 120%;
         font-weight: bold;
         color: #fbff00;
         word-break: break-word;
         background-color: rgba(0, 0, 0, 0.15);
         padding: 5px 10px;
     }
</style>

<div class="container-fluid">
    <div class="row mt-1">
        <div class="col-12">
            <div class="progress bg-dark" id="voteRemainingTime">
                <div id="t" class="progress-bar bg-danger" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
    </div>
    <div class="row mt-1 no-gutters" id="CardsList">
        @*<div class="overlay-border-frame col-3 p-1">
            <div class="overlay-corner overlay-corner-lu"></div>
            <div class="overlay-corner overlay-corner-ru"></div>
            <div class="overlay-corner overlay-corner-ld"></div>
            <div class="overlay-corner overlay-corner-rd"></div>

            <div class="overlay-border overlay-border-top"></div>
            <div class="overlay-border overlay-border-bottom"></div>
            <div class="overlay-border overlay-border-left"></div>
            <div class="overlay-border overlay-border-right"></div>

            <div class="overlay-content">
                <div class="row">
                    <div class="col-9 p-3 ms-3">
                        <span>Short title</span>
                    </div>
                    <div class="col-2 ms-auto p-2 me-2">
                        <span class="badge text-bg-warning" style="font-size: 20px">0</span>
                    </div>
                </div>
                <div class="row">
                    <h6 class="card-subtitle mb-2 text-muted ms-3">2 votes</h6>
                </div>
            </div>
        </div>*@
    </div> 
</div>

@section Scripts
{
    <script>
        const connection = new signalR.HubConnectionBuilder().withUrl("/overlayhub").build();

        function cardFromData(data) {
            console.log(data);
            const frameDiv = document.createElement('div');
            frameDiv.classList.add('overlay-border-frame', 'col-3', 'p-1');

            ['lu', 'ru', 'ld', 'rd'].forEach(pos => {
                const corner = document.createElement('div');
                corner.classList.add('overlay-corner', `overlay-corner-${pos}`);
                frameDiv.appendChild(corner);
            });

            ['top', 'bottom', 'left', 'right'].forEach(side => {
                const border = document.createElement('div');
                    border.classList.add('overlay-border', `overlay-border-${side}`);
                frameDiv.appendChild(border);
            });

            const content = document.createElement('div');
                content.classList.add('overlay-content');

            const row1 = document.createElement('div');
            row1.classList.add('row');

            const colLeft = document.createElement('div');
            colLeft.classList.add('col-9', 'p-3', 'ms-3');
            const titleSpan = document.createElement('span');
            titleSpan.textContent = data.name;
            colLeft.appendChild(titleSpan);

            const colRight = document.createElement('div');
            colRight.classList.add('col-2', 'ms-auto', 'p-2', 'me-2');
            const badge = document.createElement('span');
            badge.classList.add('badge', 'text-bg-warning');
            badge.style.fontSize = '20px';
            badge.textContent = data.index;
            colRight.appendChild(badge);

            row1.appendChild(colLeft);
            row1.appendChild(colRight);

            const row2 = document.createElement('div');
            row2.classList.add('row');

            const subtitle = document.createElement('h6');
            subtitle.classList.add('card-subtitle', 'mb-2', 'text-muted', 'ms-3');
            subtitle.textContent = `${data.votes} vote${data.votes === 1 ? '' : 's'}`;

            row2.appendChild(subtitle);

            content.appendChild(row1);
            content.appendChild(row2);
            frameDiv.appendChild(content);

            return frameDiv;
        }

        const f = document.getElementById('t');
        const cont = document.getElementById('CardsList');

        connection.on("UpdateTimePercentage", function (data) {
            console.log('received data:', data);

            f.style.setProperty('width', (data.percentage) + '%');

            cont.innerHTML = "";
            for (let i = 0; i < data.options.length; i++) {
                cont.appendChild(cardFromData(data.options[i]));
            }
        });

        // NOTE(spelos): For easier testing without the need for SignalR
        // cont.appendChild(cardFromData({ name: 'My JS Card', index: 0, votes: 0  }));
        // cont.appendChild(cardFromData({ name: 'My Very Long JS Card with a title that will expand stuff downwards to test layout', index: 1, votes: 9999  }));

        connection.start();
    </script>
}